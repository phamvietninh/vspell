%option noyywrap

%{
/* tokenize.l from SATZ, modified by pclouds */

/* 
%option c++
%option outfile="lex.yy.c"
*/

/*

LEFT_COMMENT                    \<
P                               p
S                               s
COMMENT_SLASH                   \/
RIGHT_COMMENT                   \>

{LEFT_COMMENT}{P}{RIGHT_COMMENT}                                |
{LEFT_COMMENT}{S}{RIGHT_COMMENT}                                |
{LEFT_COMMENT}{COMMENT_SLASH}{P}{RIGHT_COMMENT}                 ;
{LEFT_COMMENT}{COMMENT_SLASH}{S}{RIGHT_COMMENT}       {printf("**end**\n"); } ;

*/

#include "tokenize.h"

using namespace std;
static const char *buffer;
static int pos,len;
static Tokens *out;

#define YY_INPUT(buf,result,max_size) \
  { \
    result = (pos == len) ? YY_NULL : (buf[0] = buffer[pos++], 1); \
  }
%}

SENTENCE_FINAL			[.?!]
HYPHEN				[\-]
OPEN_SINGLE_QUOTE		[\`]
CLOSE_SINGLE_QUOTE		[\']
RIGHT_PAREN                     [\"\)\]\}\>\']


LETTERS_AND_NUMBERS		[a-zA-Z0-9\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x2\x5\x6\x14\x19\x1e]
LETTERS_NUMBER_AND_THEN_SOME	[a-zA-Z0-9\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x2\x5\x6\x14\x19\x1e\.\,\:\'\$\%\-\\\/\&\177]
APOSTROPHE                      \'

SINGLE_CHARACTER                [a-zA-Z0-9\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x2\x5\x6\x14\x19\x1e\#\_\;\!\?\@\*\+\=\~\|\^\&\,\:\$\%\\\/\177\(\)\[\]\{\}\<\>\"\177]

WHITE_SPACE			[ \t\n]
NEWLINE				[\n]
INVISIBLE			[^\040-\176\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff\x2\x5\x6\x14\x19\x1e]




%%

{SENTENCE_FINAL}+{RIGHT_PAREN}*                                 |
{HYPHEN}+							|
{OPEN_SINGLE_QUOTE}+						|
{CLOSE_SINGLE_QUOTE}+	                                        |

{LETTERS_NUMBER_AND_THEN_SOME}+{LETTERS_AND_NUMBERS}		|
{LETTERS_AND_NUMBERS}+{APOSTROPHE}                              |

{SINGLE_CHARACTER}		     { out->push_back(Token(true,yytext)); } ;

({WHITE_SPACE}|{INVISIBLE}|{NEWLINE})+				{ out->push_back(Token(false,yytext)); } ;
%%

bool tokenize(const string& s,Tokens &tokens)
{
  buffer = s.c_str();
  pos = 0;
  len = s.size();
  out = &tokens;
  return yylex() == 0;
}

